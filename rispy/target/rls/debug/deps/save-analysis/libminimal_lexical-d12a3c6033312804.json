{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4","program":"/Users/merisb/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","minimal_lexical","--edition=2018","/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=d12a3c6033312804","-C","extra-filename=-d12a3c6033312804","--out-dir","/Users/merisb/code/react-rust/@rsw/hey/target/rls/debug/deps","-L","dependency=/Users/merisb/code/react-rust/@rsw/hey/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/merisb/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/merisb/code/react-rust/@rsw/hey/target/rls/debug/deps/libminimal_lexical-d12a3c6033312804.rmeta"},"prelude":{"crate_id":{"name":"minimal_lexical","disambiguator":[6666400326049826211,0]},"crate_root":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src","external_crates":[{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9888355131369537266,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","num":2,"id":{"name":"core","disambiguator":[11275466351773074568,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[14505302196044876161,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12672318884608983985,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9602480897548461658,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6215642551405411717,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11323364399412649918,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[505106994998565642,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[5151717038203672608,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12015404889719386584,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6634436157752397486,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[10627139614780737919,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15241097753775192730,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[4193977997774401605,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4301272078305384557,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12250611045243811845,0]}},{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[8394371263132856076,0]}}],"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":0,"byte_end":1997,"line_start":1,"line_end":68,"column_start":1,"column_end":34}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table.rs","byte_start":147129,"byte_end":147130,"line_start":9,"line_end":9,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"SMALLEST_POWER_OF_FIVE, LARGEST_POWER_OF_FIVE, POWER_OF_FIVE_128","parent":{"krate":0,"index":393}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table.rs","byte_start":147193,"byte_end":147194,"line_start":11,"line_end":11,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"SMALL_INT_POW5, LARGE_POW5_STEP, SMALL_F32_POW10, SMALL_INT_POW10, LARGE_POW5, SMALL_F64_POW10","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1957,"byte_end":1962,"line_start":67,"line_end":67,"column_start":20,"column_end":25},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1985,"byte_end":1996,"line_start":68,"line_end":68,"column_start":22,"column_end":33},"alias_span":null,"name":"parse_float","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":0,"byte_end":1997,"line_start":1,"line_end":68,"column_start":1,"column_end":34},"name":"","qualname":"::","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":79},{"krate":0,"index":85},{"krate":0,"index":133},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":264},{"krate":0,"index":273},{"krate":0,"index":310},{"krate":0,"index":330},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":400},{"krate":0,"index":412},{"krate":0,"index":415}],"decl_id":null,"docs":" Fast, minimal float-parsing algorithm.","sig":null,"attributes":[{"value":"/ Fast, minimal float-parsing algorithm.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":0,"byte_end":42,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":43,"byte_end":46,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ minimal-lexical has a simple, high-level API with a single","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":47,"byte_end":109,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/ exported function: [`parse_float`].","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":110,"byte_end":149,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":150,"byte_end":153,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [`parse_float`] expects a forward iterator for the integer","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":154,"byte_end":216,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/ and fraction digits, as well as a parsed exponent as an [`i32`].","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":217,"byte_end":285,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":286,"byte_end":289,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For more examples, please see [simple-example](https://github.com/Alexhuszagh/minimal-lexical/blob/master/examples/simple.rs).","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":290,"byte_end":420,"line_start":9,"line_end":9,"column_start":1,"column_end":131}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":421,"byte_end":424,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ EXAMPLES","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":425,"byte_end":437,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/ --------","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":438,"byte_end":450,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":451,"byte_end":454,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":455,"byte_end":462,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ extern crate minimal_lexical;","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":463,"byte_end":496,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":497,"byte_end":500,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // Let's say we want to parse \"1.2345\".","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":501,"byte_end":544,"line_start":17,"line_end":17,"column_start":1,"column_end":44}},{"value":"/ // First, we need an external parser to extract the integer digits (\"1\"),","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":545,"byte_end":622,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ // the fraction digits (\"2345\"), and then parse the exponent to a 32-bit","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":623,"byte_end":699,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ // integer (0).","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":700,"byte_end":719,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ // Warning:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":720,"byte_end":735,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ // --------","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":736,"byte_end":751,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ //  Please note that leading zeros must be trimmed from the integer,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":752,"byte_end":824,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ //  and trailing zeros must be trimmed from the fraction. This cannot","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":825,"byte_end":898,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ //  be handled by minimal-lexical, since we accept iterators.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":899,"byte_end":964,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ let integer = b\"1\";","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":965,"byte_end":988,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ let fraction = b\"2345\";","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":989,"byte_end":1016,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/ let float: f64 = minimal_lexical::parse_float(integer.iter(), fraction.iter(), 0);","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1017,"byte_end":1103,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/ println!(\"float={:?}\", float);    // 1.235","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1104,"byte_end":1150,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1151,"byte_end":1158,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1159,"byte_end":1162,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ [`parse_float`]: fn.parse_float.html","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1163,"byte_end":1203,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/ [`i32`]: https://doc.rust-lang.org/stable/std/primitive.i32.html","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1204,"byte_end":1272,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1415,"byte_end":1439,"line_start":39,"line_end":39,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bigint","qualname":"::bigint","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":" A simple big-integer type for slow path algorithms.","sig":null,"attributes":[{"value":"/ A simple big-integer type for slow path algorithms.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":15650,"byte_end":15705,"line_start":1,"line_end":1,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":15706,"byte_end":15709,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This includes minimal stackvector for use in big-integer arithmetic.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":15710,"byte_end":15782,"line_start":3,"line_end":3,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16254,"byte_end":16265,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"BIGINT_BITS","qualname":"::bigint::BIGINT_BITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bits in a Bigint.","sig":null,"attributes":[{"value":"/ Number of bits in a Bigint.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16057,"byte_end":16088,"line_start":16,"line_end":16,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16089,"byte_end":16092,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This needs to be at least the number of bits required to store","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16093,"byte_end":16159,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ a Bigint, which is `log2(radix**digits)`.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16160,"byte_end":16205,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/ ≅ 3600 for base-10, rounded-up.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16206,"byte_end":16243,"line_start":20,"line_end":20,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16332,"byte_end":16344,"line_start":24,"line_end":24,"column_start":11,"column_end":23},"name":"BIGINT_LIMBS","qualname":"::bigint::BIGINT_LIMBS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The number of limbs for the bigint.\n","sig":null,"attributes":[{"value":"/ The number of limbs for the bigint.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16282,"byte_end":16321,"line_start":23,"line_end":23,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16423,"byte_end":16430,"line_start":27,"line_end":27,"column_start":10,"column_end":17},"name":"VecType","qualname":"::bigint::VecType","value":"HeapVec","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"no_alloc\"))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16380,"byte_end":16413,"line_start":26,"line_end":26,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":418},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16979,"byte_end":16985,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"Bigint","qualname":"::bigint::Bigint","value":"Bigint { data }","parent":null,"children":[{"krate":0,"index":419}],"decl_id":null,"docs":" Storage for a big integer type.","sig":null,"attributes":[{"value":"/ Storage for a big integer type.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16502,"byte_end":16537,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16538,"byte_end":16541,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This is used for algorithms when we have a finite number of digits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16542,"byte_end":16613,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ Specifically, it stores all the significant digits scaled to the","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16614,"byte_end":16682,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/ proper exponent, as an integral type, and then directly compares","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16683,"byte_end":16751,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/ these digits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16752,"byte_end":16769,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16770,"byte_end":16773,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This requires us to store the number of significant bits, plus the","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16774,"byte_end":16844,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ number of exponent bits (required) since we scale everything","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16845,"byte_end":16909,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ to the same exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16910,"byte_end":16935,"line_start":41,"line_end":41,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":419},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17782,"byte_end":17786,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"data","qualname":"::bigint::Bigint::data","value":"heapvec::HeapVec","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":" Significant digits for the float, stored in a big integer in LE order.","sig":null,"attributes":[{"value":"/ Significant digits for the float, stored in a big integer in LE order.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":16992,"byte_end":17066,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17071,"byte_end":17074,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is pretty much the same number of digits for any radix, since the","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17079,"byte_end":17153,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/  significant digits balances out the zeros from the exponent:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17158,"byte_end":17223,"line_start":47,"line_end":47,"column_start":5,"column_end":70}},{"value":"/     1. Decimal is 1091 digits, 767 mantissa digits + 324 exponent zeros.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17228,"byte_end":17304,"line_start":48,"line_end":48,"column_start":5,"column_end":81}},{"value":"/     2. Base 6 is 1097 digits, or 680 mantissa digits + 417 exponent zeros.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17309,"byte_end":17387,"line_start":49,"line_end":49,"column_start":5,"column_end":83}},{"value":"/     3. Base 36 is 1086 digits, or 877 mantissa digits + 209 exponent zeros.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17392,"byte_end":17471,"line_start":50,"line_end":50,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17476,"byte_end":17479,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ However, the number of bytes required is larger for large radixes:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17484,"byte_end":17554,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ for decimal, we need `log2(10**1091) ≅ 3600`, while for base 36","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17559,"byte_end":17628,"line_start":53,"line_end":53,"column_start":5,"column_end":72}},{"value":"/ we need `log2(36**1086) ≅ 5600`. Since we use uninitialized data,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17633,"byte_end":17704,"line_start":54,"line_end":54,"column_start":5,"column_end":74}},{"value":"/ we avoid a major performance hit from the large buffer size.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17709,"byte_end":17773,"line_start":55,"line_end":55,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17928,"byte_end":17931,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<Bigint>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a bigint representing 0.\n","sig":null,"attributes":[{"value":"/ Construct a bigint representing 0.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17856,"byte_end":17894,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17899,"byte_end":17916,"line_start":62,"line_end":62,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18087,"byte_end":18095,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<Bigint>::from_u64","value":"pub fn from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a bigint from an integer.\n","sig":null,"attributes":[{"value":"/ Construct a bigint from an integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18014,"byte_end":18053,"line_start":69,"line_end":69,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18058,"byte_end":18075,"line_start":70,"line_end":70,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18227,"byte_end":18231,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"hi64","qualname":"<Bigint>::hi64","value":"pub fn hi64(&Self) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18198,"byte_end":18215,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18377,"byte_end":18380,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"pow","qualname":"<Bigint>::pow","value":"pub fn pow(&mut Self, u32, u32) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Multiply and assign as if by exponentiation by a power.\n","sig":null,"attributes":[{"value":"/ Multiply and assign as if by exponentiation by a power.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18292,"byte_end":18351,"line_start":82,"line_end":82,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18356,"byte_end":18365,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18753,"byte_end":18763,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"bit_length","qualname":"<Bigint>::bit_length","value":"pub fn bit_length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the bit-length of the big-integer.\n","sig":null,"attributes":[{"value":"/ Calculate the bit-length of the big-integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18679,"byte_end":18727,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18732,"byte_end":18741,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19020,"byte_end":19031,"line_start":111,"line_end":111,"column_start":12,"column_end":23},"name":"ReverseView","qualname":"::bigint::ReverseView","value":"ReverseView {  }","parent":null,"children":[{"krate":0,"index":41}],"decl_id":null,"docs":" REVERSE VIEW\n Reverse, immutable view of a sequence.\n","sig":null,"attributes":[{"value":"/ REVERSE VIEW","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18948,"byte_end":18964,"line_start":108,"line_end":108,"column_start":1,"column_end":17}},{"value":"/ Reverse, immutable view of a sequence.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18966,"byte_end":19008,"line_start":110,"line_end":110,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19357,"byte_end":19362,"line_start":127,"line_end":127,"column_start":8,"column_end":13},"name":"rview","qualname":"::bigint::rview","value":"pub fn rview(&[Limb]) -> ReverseView<, Limb>","parent":null,"children":[],"decl_id":null,"docs":" Create a reverse view of the vector for indexing.\n","sig":null,"attributes":[{"value":"/ Create a reverse view of the vector for indexing.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19286,"byte_end":19339,"line_start":125,"line_end":125,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19340,"byte_end":19349,"line_start":126,"line_end":126,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19531,"byte_end":19538,"line_start":138,"line_end":138,"column_start":8,"column_end":15},"name":"compare","qualname":"::bigint::compare","value":"pub fn compare(&[Limb], &[Limb]) -> cmp::Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare `x` to `y`, in little-endian order.\n","sig":null,"attributes":[{"value":"/ Compare `x` to `y`, in little-endian order.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19466,"byte_end":19513,"line_start":136,"line_end":136,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19514,"byte_end":19523,"line_start":137,"line_end":137,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20110,"byte_end":20119,"line_start":160,"line_end":160,"column_start":8,"column_end":17},"name":"normalize","qualname":"::bigint::normalize","value":"pub fn normalize(&mut VecType)","parent":null,"children":[],"decl_id":null,"docs":" Normalize the integer, so any leading zero values are removed.\n","sig":null,"attributes":[{"value":"/ Normalize the integer, so any leading zero values are removed.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20026,"byte_end":20092,"line_start":158,"line_end":158,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20093,"byte_end":20102,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20494,"byte_end":20507,"line_start":174,"line_end":174,"column_start":8,"column_end":21},"name":"is_normalized","qualname":"::bigint::is_normalized","value":"pub fn is_normalized(&[Limb]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get if the big integer is normalized.\n","sig":null,"attributes":[{"value":"/ Get if the big integer is normalized.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20392,"byte_end":20433,"line_start":171,"line_end":171,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20434,"byte_end":20443,"line_start":172,"line_end":172,"column_start":1,"column_end":10}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20444,"byte_end":20486,"line_start":173,"line_end":173,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20811,"byte_end":20819,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::bigint::from_u64","value":"pub fn from_u64(u64) -> VecType","parent":null,"children":[],"decl_id":null,"docs":" Create StackVec from u64 value.\n","sig":null,"attributes":[{"value":"/ Create StackVec from u64 value.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20710,"byte_end":20745,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20746,"byte_end":20763,"line_start":186,"line_end":186,"column_start":1,"column_end":18}},{"value":"allow(clippy :: branches_sharing_code)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":20764,"byte_end":20803,"line_start":187,"line_end":187,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21270,"byte_end":21277,"line_start":210,"line_end":210,"column_start":8,"column_end":15},"name":"nonzero","qualname":"::bigint::nonzero","value":"pub fn nonzero(&[Limb], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if any of the remaining bits are non-zero.","sig":null,"attributes":[{"value":"/ Check if any of the remaining bits are non-zero.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21138,"byte_end":21190,"line_start":204,"line_end":204,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21191,"byte_end":21194,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21195,"byte_end":21207,"line_start":206,"line_end":206,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21208,"byte_end":21211,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ Safe as long as `rindex <= x.len()`.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21212,"byte_end":21252,"line_start":208,"line_end":208,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21253,"byte_end":21262,"line_start":209,"line_end":209,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21576,"byte_end":21589,"line_start":222,"line_end":222,"column_start":8,"column_end":21},"name":"u32_to_hi64_1","qualname":"::bigint::u32_to_hi64_1","value":"pub fn u32_to_hi64_1(u32) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 32-bit integer to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 32-bit integer to high 64-bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21517,"byte_end":21558,"line_start":220,"line_end":220,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21559,"byte_end":21568,"line_start":221,"line_end":221,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21710,"byte_end":21723,"line_start":228,"line_end":228,"column_start":8,"column_end":21},"name":"u32_to_hi64_2","qualname":"::bigint::u32_to_hi64_2","value":"pub fn u32_to_hi64_2(u32, u32) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 2 32-bit integers to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 2 32-bit integers to high 64-bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21648,"byte_end":21692,"line_start":226,"line_end":226,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21693,"byte_end":21702,"line_start":227,"line_end":227,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21907,"byte_end":21920,"line_start":236,"line_end":236,"column_start":8,"column_end":21},"name":"u32_to_hi64_3","qualname":"::bigint::u32_to_hi64_3","value":"pub fn u32_to_hi64_3(u32, u32, u32) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 3 32-bit integers to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 3 32-bit integers to high 64-bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21845,"byte_end":21889,"line_start":234,"line_end":234,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":21890,"byte_end":21899,"line_start":235,"line_end":235,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":22138,"byte_end":22151,"line_start":245,"line_end":245,"column_start":8,"column_end":21},"name":"u64_to_hi64_1","qualname":"::bigint::u64_to_hi64_1","value":"pub fn u64_to_hi64_1(u64) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 64-bit integer to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 64-bit integer to high 64-bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":22079,"byte_end":22120,"line_start":243,"line_end":243,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":22121,"byte_end":22130,"line_start":244,"line_end":244,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":22298,"byte_end":22311,"line_start":252,"line_end":252,"column_start":8,"column_end":21},"name":"u64_to_hi64_2","qualname":"::bigint::u64_to_hi64_2","value":"pub fn u64_to_hi64_2(u64, u64) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Shift 2 64-bit integers to high 64-bits.\n","sig":null,"attributes":[{"value":"/ Shift 2 64-bit integers to high 64-bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":22236,"byte_end":22280,"line_start":250,"line_end":250,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":22281,"byte_end":22290,"line_start":251,"line_end":251,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":23812,"byte_end":23816,"line_start":310,"line_end":310,"column_start":8,"column_end":12},"name":"hi64","qualname":"::bigint::hi64","value":"pub fn hi64(&[Limb]) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Get the high 64 bits from the vector.\n","sig":null,"attributes":[{"value":"/ Get the high 64 bits from the vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":23745,"byte_end":23786,"line_start":308,"line_end":308,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":23787,"byte_end":23804,"line_start":309,"line_end":309,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26542,"byte_end":26545,"line_start":373,"line_end":373,"column_start":8,"column_end":11},"name":"pow","qualname":"::bigint::pow","value":"pub fn pow(&mut VecType, u32) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" MulAssign by a power of 5.","sig":null,"attributes":[{"value":"/ MulAssign by a power of 5.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24379,"byte_end":24409,"line_start":327,"line_end":327,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24410,"byte_end":24413,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ Theoretically...","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24414,"byte_end":24434,"line_start":329,"line_end":329,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24435,"byte_end":24438,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ Use an exponentiation by squaring method, since it reduces the time","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24439,"byte_end":24510,"line_start":331,"line_end":331,"column_start":1,"column_end":72}},{"value":"/ complexity of the multiplication to ~`O(log(n))` for the squaring,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24511,"byte_end":24581,"line_start":332,"line_end":332,"column_start":1,"column_end":71}},{"value":"/ and `O(n*m)` for the result. Since `m` is typically a lower-order","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24582,"byte_end":24651,"line_start":333,"line_end":333,"column_start":1,"column_end":70}},{"value":"/ factor, this significantly reduces the number of multiplications","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24652,"byte_end":24720,"line_start":334,"line_end":334,"column_start":1,"column_end":69}},{"value":"/ we need to do. Iteratively multiplying by small powers follows","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24721,"byte_end":24787,"line_start":335,"line_end":335,"column_start":1,"column_end":67}},{"value":"/ the nth triangular number series, which scales as `O(p^2)`, but","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24788,"byte_end":24855,"line_start":336,"line_end":336,"column_start":1,"column_end":68}},{"value":"/ where `p` is `n+m`. In short, it scales very poorly.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24856,"byte_end":24912,"line_start":337,"line_end":337,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24913,"byte_end":24916,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Practically....","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24917,"byte_end":24936,"line_start":339,"line_end":339,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24937,"byte_end":24940,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ Exponentiation by Squaring:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24941,"byte_end":24972,"line_start":341,"line_end":341,"column_start":1,"column_end":32}},{"value":"/     running 2 tests","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24973,"byte_end":24996,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/     test bigcomp_f32_lexical ... bench:       1,018 ns/iter (+/- 78)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":24997,"byte_end":25069,"line_start":343,"line_end":343,"column_start":1,"column_end":73}},{"value":"/     test bigcomp_f64_lexical ... bench:       3,639 ns/iter (+/- 1,007)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25070,"byte_end":25145,"line_start":344,"line_end":344,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25146,"byte_end":25149,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ Exponentiation by Iterative Small Powers:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25150,"byte_end":25195,"line_start":346,"line_end":346,"column_start":1,"column_end":46}},{"value":"/     running 2 tests","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25196,"byte_end":25219,"line_start":347,"line_end":347,"column_start":1,"column_end":24}},{"value":"/     test bigcomp_f32_lexical ... bench:         518 ns/iter (+/- 31)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25220,"byte_end":25292,"line_start":348,"line_end":348,"column_start":1,"column_end":73}},{"value":"/     test bigcomp_f64_lexical ... bench:         583 ns/iter (+/- 47)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25293,"byte_end":25365,"line_start":349,"line_end":349,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25366,"byte_end":25369,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ Exponentiation by Iterative Large Powers (of 2):","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25370,"byte_end":25422,"line_start":351,"line_end":351,"column_start":1,"column_end":53}},{"value":"/     running 2 tests","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25423,"byte_end":25446,"line_start":352,"line_end":352,"column_start":1,"column_end":24}},{"value":"/     test bigcomp_f32_lexical ... bench:         671 ns/iter (+/- 31)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25447,"byte_end":25519,"line_start":353,"line_end":353,"column_start":1,"column_end":73}},{"value":"/     test bigcomp_f64_lexical ... bench:       1,394 ns/iter (+/- 47)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25520,"byte_end":25592,"line_start":354,"line_end":354,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25593,"byte_end":25596,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ The following benchmarks were run on `1 * 5^300`, using native `pow`,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25597,"byte_end":25670,"line_start":356,"line_end":356,"column_start":1,"column_end":74}},{"value":"/ a version with only small powers, and one with pre-computed powers","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25671,"byte_end":25741,"line_start":357,"line_end":357,"column_start":1,"column_end":71}},{"value":"/ of `5^(3 * max_exp)`, rather than `5^(5 * max_exp)`.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25742,"byte_end":25798,"line_start":358,"line_end":358,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25799,"byte_end":25802,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ However, using large powers is crucial for good performance for higher","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25803,"byte_end":25877,"line_start":360,"line_end":360,"column_start":1,"column_end":75}},{"value":"/ powers.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25878,"byte_end":25889,"line_start":361,"line_end":361,"column_start":1,"column_end":12}},{"value":"/     pow/default             time:   [426.20 ns 427.96 ns 429.89 ns]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25890,"byte_end":25961,"line_start":362,"line_end":362,"column_start":1,"column_end":72}},{"value":"/     pow/small               time:   [2.9270 us 2.9411 us 2.9565 us]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":25962,"byte_end":26033,"line_start":363,"line_end":363,"column_start":1,"column_end":72}},{"value":"/     pow/large:3             time:   [838.51 ns 842.21 ns 846.27 ns]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26034,"byte_end":26105,"line_start":364,"line_end":364,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26106,"byte_end":26109,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ Even using worst-case scenarios, exponentiation by squaring is","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26110,"byte_end":26176,"line_start":366,"line_end":366,"column_start":1,"column_end":67}},{"value":"/ significantly slower for our workloads. Just multiply by small powers,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26177,"byte_end":26251,"line_start":367,"line_end":367,"column_start":1,"column_end":75}},{"value":"/ in simple cases, and use precalculated large powers in other cases.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26252,"byte_end":26323,"line_start":368,"line_end":368,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26324,"byte_end":26327,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ Furthermore, using sufficiently big large powers is also crucial for","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26328,"byte_end":26400,"line_start":370,"line_end":370,"column_start":1,"column_end":73}},{"value":"/ performance. This is a tradeoff of binary size and performance, and","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26401,"byte_end":26472,"line_start":371,"line_end":371,"column_start":1,"column_end":72}},{"value":"/ using a single value at ~`5^(5 * max_exp)` seems optimal.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":26473,"byte_end":26534,"line_start":372,"line_end":372,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27567,"byte_end":27577,"line_start":409,"line_end":409,"column_start":8,"column_end":18},"name":"scalar_add","qualname":"::bigint::scalar_add","value":"pub fn scalar_add(Limb, Limb) -> (Limb, bool)","parent":null,"children":[],"decl_id":null,"docs":" Add two small integers and return the resulting value and if overflow happens.\n","sig":null,"attributes":[{"value":"/ Add two small integers and return the resulting value and if overflow happens.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27459,"byte_end":27541,"line_start":407,"line_end":407,"column_start":1,"column_end":83}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27542,"byte_end":27559,"line_start":408,"line_end":408,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27796,"byte_end":27806,"line_start":417,"line_end":417,"column_start":8,"column_end":18},"name":"scalar_mul","qualname":"::bigint::scalar_mul","value":"pub fn scalar_mul(Limb, Limb, Limb) -> (Limb, Limb)","parent":null,"children":[],"decl_id":null,"docs":" Multiply two small integers (with carry) (and return the overflow contribution).","sig":null,"attributes":[{"value":"/ Multiply two small integers (with carry) (and return the overflow contribution).","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27642,"byte_end":27726,"line_start":413,"line_end":413,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27727,"byte_end":27730,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ Returns the (low, high) components.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27731,"byte_end":27770,"line_start":415,"line_end":415,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":27771,"byte_end":27788,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28226,"byte_end":28240,"line_start":430,"line_end":430,"column_start":8,"column_end":22},"name":"small_add_from","qualname":"::bigint::small_add_from","value":"pub fn small_add_from(&mut VecType, Limb, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add small integer to bigint starting from offset.\n","sig":null,"attributes":[{"value":"/ Add small integer to bigint starting from offset.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28155,"byte_end":28208,"line_start":428,"line_end":428,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28209,"byte_end":28218,"line_start":429,"line_end":429,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28730,"byte_end":28739,"line_start":448,"line_end":448,"column_start":8,"column_end":17},"name":"small_add","qualname":"::bigint::small_add","value":"pub fn small_add(&mut VecType, Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add small integer to bigint.\n","sig":null,"attributes":[{"value":"/ Add small integer to bigint.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28672,"byte_end":28704,"line_start":446,"line_end":446,"column_start":1,"column_end":33}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28705,"byte_end":28722,"line_start":447,"line_end":447,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28868,"byte_end":28877,"line_start":454,"line_end":454,"column_start":8,"column_end":17},"name":"small_mul","qualname":"::bigint::small_mul","value":"pub fn small_mul(&mut VecType, Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Multiply bigint by small integer.\n","sig":null,"attributes":[{"value":"/ Multiply bigint by small integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28813,"byte_end":28850,"line_start":452,"line_end":452,"column_start":1,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":28851,"byte_end":28860,"line_start":453,"line_end":453,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":29293,"byte_end":29307,"line_start":472,"line_end":472,"column_start":8,"column_end":22},"name":"large_add_from","qualname":"::bigint::large_add_from","value":"pub fn large_add_from(&mut VecType, &[Limb], usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add bigint to bigint starting from offset.\n","sig":null,"attributes":[{"value":"/ Add bigint to bigint starting from offset.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":29239,"byte_end":29285,"line_start":471,"line_end":471,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30627,"byte_end":30636,"line_start":511,"line_end":511,"column_start":8,"column_end":17},"name":"large_add","qualname":"::bigint::large_add","value":"pub fn large_add(&mut VecType, &[Limb]) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Add bigint to bigint.\n","sig":null,"attributes":[{"value":"/ Add bigint to bigint.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30576,"byte_end":30601,"line_start":509,"line_end":509,"column_start":1,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30602,"byte_end":30619,"line_start":510,"line_end":510,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33829,"byte_end":33837,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"long_mul","qualname":"::bigint::long_mul","value":"pub fn long_mul(&[Limb], &[Limb]) -> Option<VecType>","parent":null,"children":[],"decl_id":null,"docs":" Grade-school multiplication algorithm.","sig":null,"attributes":[{"value":"/ Grade-school multiplication algorithm.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30713,"byte_end":30755,"line_start":515,"line_end":515,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30756,"byte_end":30759,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ Slow, naive algorithm, using limb-bit bases and just shifting left for","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30760,"byte_end":30834,"line_start":517,"line_end":517,"column_start":1,"column_end":75}},{"value":"/ each iteration. This could be optimized with numerous other algorithms,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30835,"byte_end":30910,"line_start":518,"line_end":518,"column_start":1,"column_end":76}},{"value":"/ but it's extremely simple, and works in O(n*m) time, which is fine","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30911,"byte_end":30981,"line_start":519,"line_end":519,"column_start":1,"column_end":71}},{"value":"/ by me. Each iteration, of which there are `m` iterations, requires","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":30982,"byte_end":31052,"line_start":520,"line_end":520,"column_start":1,"column_end":71}},{"value":"/ `n` multiplications, and `n` additions, or grade-school multiplication.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31053,"byte_end":31128,"line_start":521,"line_end":521,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31129,"byte_end":31132,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ Don't use Karatsuba multiplication, since out implementation seems to","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31133,"byte_end":31206,"line_start":523,"line_end":523,"column_start":1,"column_end":74}},{"value":"/ be slower asymptotically, which is likely just due to the small sizes","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31207,"byte_end":31280,"line_start":524,"line_end":524,"column_start":1,"column_end":74}},{"value":"/ we deal with here. For example, running on the following data:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31281,"byte_end":31347,"line_start":525,"line_end":525,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31348,"byte_end":31351,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31352,"byte_end":31363,"line_start":527,"line_end":527,"column_start":1,"column_end":12}},{"value":"/ const SMALL_X: &[u32] = &[","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31364,"byte_end":31394,"line_start":528,"line_end":528,"column_start":1,"column_end":31}},{"value":"/     766857581, 3588187092, 1583923090, 2204542082, 1564708913, 2695310100, 3676050286,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31395,"byte_end":31485,"line_start":529,"line_end":529,"column_start":1,"column_end":91}},{"value":"/     1022770393, 468044626, 446028186","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31486,"byte_end":31526,"line_start":530,"line_end":530,"column_start":1,"column_end":41}},{"value":"/ ];","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31527,"byte_end":31533,"line_start":531,"line_end":531,"column_start":1,"column_end":7}},{"value":"/ const SMALL_Y: &[u32] = &[","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31534,"byte_end":31564,"line_start":532,"line_end":532,"column_start":1,"column_end":31}},{"value":"/     3945492125, 3250752032, 1282554898, 1708742809, 1131807209, 3171663979, 1353276095,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31565,"byte_end":31656,"line_start":533,"line_end":533,"column_start":1,"column_end":92}},{"value":"/     1678845844, 2373924447, 3640713171","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31657,"byte_end":31699,"line_start":534,"line_end":534,"column_start":1,"column_end":43}},{"value":"/ ];","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31700,"byte_end":31706,"line_start":535,"line_end":535,"column_start":1,"column_end":7}},{"value":"/ const LARGE_X: &[u32] = &[","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31707,"byte_end":31737,"line_start":536,"line_end":536,"column_start":1,"column_end":31}},{"value":"/     3647536243, 2836434412, 2154401029, 1297917894, 137240595, 790694805, 2260404854,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31738,"byte_end":31827,"line_start":537,"line_end":537,"column_start":1,"column_end":90}},{"value":"/     3872698172, 690585094, 99641546, 3510774932, 1672049983, 2313458559, 2017623719,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31828,"byte_end":31916,"line_start":538,"line_end":538,"column_start":1,"column_end":89}},{"value":"/     638180197, 1140936565, 1787190494, 1797420655, 14113450, 2350476485, 3052941684,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":31917,"byte_end":32005,"line_start":539,"line_end":539,"column_start":1,"column_end":89}},{"value":"/     1993594787, 2901001571, 4156930025, 1248016552, 848099908, 2660577483, 4030871206,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32006,"byte_end":32096,"line_start":540,"line_end":540,"column_start":1,"column_end":91}},{"value":"/     692169593, 2835966319, 1781364505, 4266390061, 1813581655, 4210899844, 2137005290,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32097,"byte_end":32187,"line_start":541,"line_end":541,"column_start":1,"column_end":91}},{"value":"/     2346701569, 3715571980, 3386325356, 1251725092, 2267270902, 474686922, 2712200426,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32188,"byte_end":32278,"line_start":542,"line_end":542,"column_start":1,"column_end":91}},{"value":"/     197581715, 3087636290, 1379224439, 1258285015, 3230794403, 2759309199, 1494932094,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32279,"byte_end":32369,"line_start":543,"line_end":543,"column_start":1,"column_end":91}},{"value":"/     326310242","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32370,"byte_end":32387,"line_start":544,"line_end":544,"column_start":1,"column_end":18}},{"value":"/ ];","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32388,"byte_end":32394,"line_start":545,"line_end":545,"column_start":1,"column_end":7}},{"value":"/ const LARGE_Y: &[u32] = &[","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32395,"byte_end":32425,"line_start":546,"line_end":546,"column_start":1,"column_end":31}},{"value":"/     1574249566, 868970575, 76716509, 3198027972, 1541766986, 1095120699, 3891610505,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32426,"byte_end":32514,"line_start":547,"line_end":547,"column_start":1,"column_end":89}},{"value":"/     2322545818, 1677345138, 865101357, 2650232883, 2831881215, 3985005565, 2294283760,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32515,"byte_end":32605,"line_start":548,"line_end":548,"column_start":1,"column_end":91}},{"value":"/     3468161605, 393539559, 3665153349, 1494067812, 106699483, 2596454134, 797235106,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32606,"byte_end":32694,"line_start":549,"line_end":549,"column_start":1,"column_end":89}},{"value":"/     705031740, 1209732933, 2732145769, 4122429072, 141002534, 790195010, 4014829800,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32695,"byte_end":32783,"line_start":550,"line_end":550,"column_start":1,"column_end":89}},{"value":"/     1303930792, 3649568494, 308065964, 1233648836, 2807326116, 79326486, 1262500691,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32784,"byte_end":32872,"line_start":551,"line_end":551,"column_start":1,"column_end":89}},{"value":"/     621809229, 2258109428, 3819258501, 171115668, 1139491184, 2979680603, 1333372297,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32873,"byte_end":32962,"line_start":552,"line_end":552,"column_start":1,"column_end":90}},{"value":"/     1657496603, 2790845317, 4090236532, 4220374789, 601876604, 1828177209, 2372228171,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":32963,"byte_end":33053,"line_start":553,"line_end":553,"column_start":1,"column_end":91}},{"value":"/     2247372529","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33054,"byte_end":33072,"line_start":554,"line_end":554,"column_start":1,"column_end":19}},{"value":"/ ];","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33073,"byte_end":33079,"line_start":555,"line_end":555,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33080,"byte_end":33087,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33088,"byte_end":33091,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ We get the following results:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33092,"byte_end":33125,"line_start":558,"line_end":558,"column_start":1,"column_end":34}},{"value":"/ ```text","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33127,"byte_end":33138,"line_start":560,"line_end":560,"column_start":1,"column_end":12}},{"value":"/ mul/small:long          time:   [220.23 ns 221.47 ns 222.81 ns]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33139,"byte_end":33206,"line_start":561,"line_end":561,"column_start":1,"column_end":68}},{"value":"/ Found 4 outliers among 100 measurements (4.00%)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33207,"byte_end":33258,"line_start":562,"line_end":562,"column_start":1,"column_end":52}},{"value":"/   2 (2.00%) high mild","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33259,"byte_end":33284,"line_start":563,"line_end":563,"column_start":1,"column_end":26}},{"value":"/   2 (2.00%) high severe","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33285,"byte_end":33312,"line_start":564,"line_end":564,"column_start":1,"column_end":28}},{"value":"/ mul/small:karatsuba     time:   [233.88 ns 234.63 ns 235.44 ns]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33313,"byte_end":33380,"line_start":565,"line_end":565,"column_start":1,"column_end":68}},{"value":"/ Found 11 outliers among 100 measurements (11.00%)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33381,"byte_end":33434,"line_start":566,"line_end":566,"column_start":1,"column_end":54}},{"value":"/   8 (8.00%) high mild","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33435,"byte_end":33460,"line_start":567,"line_end":567,"column_start":1,"column_end":26}},{"value":"/   3 (3.00%) high severe","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33461,"byte_end":33488,"line_start":568,"line_end":568,"column_start":1,"column_end":28}},{"value":"/ mul/large:long          time:   [1.9365 us 1.9455 us 1.9558 us]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33489,"byte_end":33556,"line_start":569,"line_end":569,"column_start":1,"column_end":68}},{"value":"/ Found 12 outliers among 100 measurements (12.00%)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33557,"byte_end":33610,"line_start":570,"line_end":570,"column_start":1,"column_end":54}},{"value":"/   7 (7.00%) high mild","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33611,"byte_end":33636,"line_start":571,"line_end":571,"column_start":1,"column_end":26}},{"value":"/   5 (5.00%) high severe","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33637,"byte_end":33664,"line_start":572,"line_end":572,"column_start":1,"column_end":28}},{"value":"/ mul/large:karatsuba     time:   [4.4250 us 4.4515 us 4.4812 us]","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33665,"byte_end":33732,"line_start":573,"line_end":573,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33733,"byte_end":33740,"line_start":574,"line_end":574,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33741,"byte_end":33744,"line_start":575,"line_end":575,"column_start":1,"column_end":4}},{"value":"/ In short, Karatsuba multiplication is never worthwhile for out use-case.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":33745,"byte_end":33821,"line_start":576,"line_end":576,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":34654,"byte_end":34663,"line_start":602,"line_end":602,"column_start":8,"column_end":17},"name":"large_mul","qualname":"::bigint::large_mul","value":"pub fn large_mul(&mut VecType, &[Limb]) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Multiply bigint by bigint using grade-school multiplication algorithm.\n","sig":null,"attributes":[{"value":"/ Multiply bigint by bigint using grade-school multiplication algorithm.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":34554,"byte_end":34628,"line_start":600,"line_end":600,"column_start":1,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":34629,"byte_end":34646,"line_start":601,"line_end":601,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":35047,"byte_end":35055,"line_start":619,"line_end":619,"column_start":8,"column_end":16},"name":"shl_bits","qualname":"::bigint::shl_bits","value":"pub fn shl_bits(&mut VecType, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Shift-left `n` bits inside a buffer.\n","sig":null,"attributes":[{"value":"/ Shift-left `n` bits inside a buffer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":34989,"byte_end":35029,"line_start":617,"line_end":617,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":35030,"byte_end":35039,"line_start":618,"line_end":618,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":35844,"byte_end":35853,"line_start":649,"line_end":649,"column_start":8,"column_end":17},"name":"shl_limbs","qualname":"::bigint::shl_limbs","value":"pub fn shl_limbs(&mut VecType, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Shift-left `n` limbs inside a buffer.\n","sig":null,"attributes":[{"value":"/ Shift-left `n` limbs inside a buffer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":35785,"byte_end":35826,"line_start":647,"line_end":647,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":35827,"byte_end":35836,"line_start":648,"line_end":648,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":36505,"byte_end":36508,"line_start":673,"line_end":673,"column_start":8,"column_end":11},"name":"shl","qualname":"::bigint::shl","value":"pub fn shl(&mut VecType, usize) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Shift-left buffer by n bits.\n","sig":null,"attributes":[{"value":"/ Shift-left buffer by n bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":36455,"byte_end":36487,"line_start":671,"line_end":671,"column_start":1,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":36488,"byte_end":36497,"line_start":672,"line_end":672,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":36798,"byte_end":36811,"line_start":687,"line_end":687,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::bigint::leading_zeros","value":"pub fn leading_zeros(&[Limb]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get number of leading zero bits in the storage.\n","sig":null,"attributes":[{"value":"/ Get number of leading zero bits in the storage.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":36729,"byte_end":36780,"line_start":685,"line_end":685,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":36781,"byte_end":36790,"line_start":686,"line_end":686,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":37104,"byte_end":37114,"line_start":699,"line_end":699,"column_start":8,"column_end":18},"name":"bit_length","qualname":"::bigint::bit_length","value":"pub fn bit_length(&[Limb]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the bit-length of the big-integer.\n","sig":null,"attributes":[{"value":"/ Calculate the bit-length of the big-integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":37038,"byte_end":37086,"line_start":697,"line_end":697,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":37087,"byte_end":37096,"line_start":698,"line_end":698,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":39847,"byte_end":39851,"line_start":777,"line_end":777,"column_start":10,"column_end":14},"name":"Limb","qualname":"::bigint::Limb","value":"u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":39769,"byte_end":39837,"line_start":776,"line_end":776,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":39937,"byte_end":39941,"line_start":779,"line_end":779,"column_start":10,"column_end":14},"name":"Wide","qualname":"::bigint::Wide","value":"u128","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":39859,"byte_end":39927,"line_start":778,"line_end":778,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":40029,"byte_end":40038,"line_start":781,"line_end":781,"column_start":11,"column_end":20},"name":"LIMB_BITS","qualname":"::bigint::LIMB_BITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":39950,"byte_end":40018,"line_start":780,"line_end":780,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":79},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"extended_float","qualname":"::extended_float","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":83}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":429},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40574,"byte_end":40587,"line_start":11,"line_end":11,"column_start":12,"column_end":25},"name":"ExtendedFloat","qualname":"::extended_float::ExtendedFloat","value":"ExtendedFloat { mant, exp }","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"decl_id":null,"docs":" Extended precision floating-point type.","sig":null,"attributes":[{"value":"/ Extended precision floating-point type.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40407,"byte_end":40450,"line_start":7,"line_end":7,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40451,"byte_end":40454,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Private implementation, exposed only for testing purposes.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40455,"byte_end":40517,"line_start":9,"line_end":9,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":430},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40649,"byte_end":40653,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"mant","qualname":"::extended_float::ExtendedFloat::mant","value":"u64","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Mantissa for the extended-precision float.\n","sig":null,"attributes":[{"value":"/ Mantissa for the extended-precision float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40594,"byte_end":40640,"line_start":12,"line_end":12,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":431},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40726,"byte_end":40729,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"exp","qualname":"::extended_float::ExtendedFloat::exp","value":"i32","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Binary exponent for the extended-precision float.\n","sig":null,"attributes":[{"value":"/ Binary exponent for the extended-precision float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40664,"byte_end":40717,"line_start":14,"line_end":14,"column_start":5,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40831,"byte_end":40848,"line_start":20,"line_end":20,"column_start":8,"column_end":25},"name":"extended_to_float","qualname":"::extended_float::extended_to_float","value":"pub fn extended_to_float<F: Float>(ExtendedFloat) -> F","parent":null,"children":[],"decl_id":null,"docs":" Converts an `ExtendedFloat` to the closest machine float type.\n","sig":null,"attributes":[{"value":"/ Converts an `ExtendedFloat` to the closest machine float type.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40739,"byte_end":40805,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/extended_float.rs","byte_start":40806,"byte_end":40823,"line_start":19,"line_end":19,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":85},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"heapvec","qualname":"::heapvec","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":99},{"krate":0,"index":116},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":131}],"decl_id":null,"docs":" Simple heap-allocated vector.\n","sig":null,"attributes":[{"value":"/ Simple heap-allocated vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":44876,"byte_end":44909,"line_start":1,"line_end":1,"column_start":1,"column_end":34}},{"value":"cfg(not(feature = \"no_alloc\"))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":44911,"byte_end":44945,"line_start":3,"line_end":3,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":444},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45165,"byte_end":45172,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"HeapVec","qualname":"::heapvec::HeapVec","value":"HeapVec {  }","parent":null,"children":[{"krate":0,"index":445}],"decl_id":null,"docs":" Simple heap vector implementation.\n","sig":null,"attributes":[{"value":"/ Simple heap vector implementation.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45098,"byte_end":45136,"line_start":13,"line_end":13,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45372,"byte_end":45375,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<HeapVec>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty vector.\n","sig":null,"attributes":[{"value":"/ Construct an empty vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45316,"byte_end":45346,"line_start":22,"line_end":22,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45351,"byte_end":45360,"line_start":23,"line_end":23,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45556,"byte_end":45564,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"try_from","qualname":"<HeapVec>::try_from","value":"pub fn try_from(&[bigint::Limb]) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a vector from an existing slice.\n","sig":null,"attributes":[{"value":"/ Construct a vector from an existing slice.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45484,"byte_end":45530,"line_start":30,"line_end":30,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45535,"byte_end":45544,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46085,"byte_end":46092,"line_start":48,"line_end":48,"column_start":19,"column_end":26},"name":"set_len","qualname":"<HeapVec>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets the length of a vector.","sig":null,"attributes":[{"value":"/ Sets the length of a vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45695,"byte_end":45727,"line_start":38,"line_end":38,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45732,"byte_end":45735,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ This will explicitly set the size of the vector, without actually","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45740,"byte_end":45809,"line_start":40,"line_end":40,"column_start":5,"column_end":74}},{"value":"/ modifying its buffers, so it is up to the caller to ensure that the","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45814,"byte_end":45885,"line_start":41,"line_end":41,"column_start":5,"column_end":76}},{"value":"/ vector is actually the specified size.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45890,"byte_end":45932,"line_start":42,"line_end":42,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45937,"byte_end":45940,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45945,"byte_end":45957,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45962,"byte_end":45965,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Safe as long as `len` is less than `self.capacity()` and has been initialized.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45970,"byte_end":46052,"line_start":46,"line_end":46,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46057,"byte_end":46066,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46298,"byte_end":46301,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"len","qualname":"<HeapVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of elements stored in the vector.\n","sig":null,"attributes":[{"value":"/ The number of elements stored in the vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46224,"byte_end":46272,"line_start":53,"line_end":53,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46277,"byte_end":46286,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46408,"byte_end":46416,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HeapVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If the vector is empty.\n","sig":null,"attributes":[{"value":"/ If the vector is empty.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46355,"byte_end":46382,"line_start":59,"line_end":59,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46387,"byte_end":46396,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46539,"byte_end":46547,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HeapVec>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of items the vector can hold.\n","sig":null,"attributes":[{"value":"/ The number of items the vector can hold.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46469,"byte_end":46513,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46518,"byte_end":46527,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46665,"byte_end":46673,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"try_push","qualname":"<HeapVec>::try_push","value":"pub fn try_push(&mut Self, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Append an item to the vector.\n","sig":null,"attributes":[{"value":"/ Append an item to the vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46606,"byte_end":46639,"line_start":71,"line_end":71,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46644,"byte_end":46653,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46885,"byte_end":46888,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"pop","qualname":"<HeapVec>::pop","value":"pub fn pop(&mut Self) -> Option<bigint::Limb>","parent":null,"children":[],"decl_id":null,"docs":" Remove an item from the end of the vector and return it, or None if empty.\n","sig":null,"attributes":[{"value":"/ Remove an item from the end of the vector and return it, or None if empty.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46781,"byte_end":46859,"line_start":78,"line_end":78,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46864,"byte_end":46873,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47048,"byte_end":47058,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"try_extend","qualname":"<HeapVec>::try_extend","value":"pub fn try_extend(&mut Self, &[bigint::Limb]) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Copy elements from a slice and append them to the vector.\n","sig":null,"attributes":[{"value":"/ Copy elements from a slice and append them to the vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":46961,"byte_end":47022,"line_start":84,"line_end":84,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47027,"byte_end":47036,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47383,"byte_end":47393,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"try_resize","qualname":"<HeapVec>::try_resize","value":"pub fn try_resize(&mut Self, usize, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to resize the buffer.","sig":null,"attributes":[{"value":"/ Try to resize the buffer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47178,"byte_end":47207,"line_start":91,"line_end":91,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47212,"byte_end":47215,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ If the new length is smaller than the current length, truncate","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47220,"byte_end":47286,"line_start":93,"line_end":93,"column_start":5,"column_end":71}},{"value":"/ the input. If it's larger, then append elements to the buffer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47291,"byte_end":47357,"line_start":94,"line_end":94,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47362,"byte_end":47371,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47606,"byte_end":47610,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"hi64","qualname":"<HeapVec>::hi64","value":"pub fn hi64(&Self) -> (u64, bool)","parent":null,"children":[],"decl_id":null,"docs":" Get the high 64 bits from the vector.\n","sig":null,"attributes":[{"value":"/ Get the high 64 bits from the vector.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47531,"byte_end":47572,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47577,"byte_end":47594,"line_start":104,"line_end":104,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47761,"byte_end":47769,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<HeapVec>::from_u64","value":"pub fn from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create StackVec from u64 value.\n","sig":null,"attributes":[{"value":"/ Create StackVec from u64 value.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47692,"byte_end":47727,"line_start":111,"line_end":111,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47732,"byte_end":47749,"line_start":112,"line_end":112,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47932,"byte_end":47941,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"normalize","qualname":"<HeapVec>::normalize","value":"pub fn normalize(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Normalize the integer, so any leading zero values are removed.\n","sig":null,"attributes":[{"value":"/ Normalize the integer, so any leading zero values are removed.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47840,"byte_end":47906,"line_start":119,"line_end":119,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47911,"byte_end":47920,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48065,"byte_end":48078,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<HeapVec>::is_normalized","value":"pub fn is_normalized(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get if the big integer is normalized.\n","sig":null,"attributes":[{"value":"/ Get if the big integer is normalized.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":47998,"byte_end":48039,"line_start":125,"line_end":125,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48044,"byte_end":48053,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48197,"byte_end":48206,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"add_small","qualname":"<HeapVec>::add_small","value":"pub fn add_small(&mut Self, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" AddAssign small integer.\n","sig":null,"attributes":[{"value":"/ AddAssign small integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48143,"byte_end":48171,"line_start":131,"line_end":131,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48176,"byte_end":48185,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48351,"byte_end":48360,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"mul_small","qualname":"<HeapVec>::mul_small","value":"pub fn mul_small(&mut Self, bigint::Limb) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" MulAssign small integer.\n","sig":null,"attributes":[{"value":"/ MulAssign small integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48297,"byte_end":48325,"line_start":137,"line_end":137,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48330,"byte_end":48339,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":133},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lemire","qualname":"::lemire","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" Implementation of the Eisel-Lemire algorithm.","sig":null,"attributes":[{"value":"/ Implementation of the Eisel-Lemire algorithm.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49453,"byte_end":49502,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49503,"byte_end":49506,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is adapted from [fast-float-rust](https://github.com/aldanor/fast-float-rust),","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49507,"byte_end":49594,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ a port of [fast_float](https://github.com/fastfloat/fast_float) to Rust.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49595,"byte_end":49671,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"cfg(not(feature = \"compact\"))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49673,"byte_end":49706,"line_start":6,"line_end":6,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":153},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50003,"byte_end":50009,"line_start":16,"line_end":16,"column_start":8,"column_end":14},"name":"lemire","qualname":"::lemire::lemire","value":"pub fn lemire<F: Float>(&Number) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Ensure truncation of digits doesn't affect our computation, by doing 2 passes.\n","sig":null,"attributes":[{"value":"/ Ensure truncation of digits doesn't affect our computation, by doing 2 passes.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49903,"byte_end":49985,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":49986,"byte_end":49995,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51625,"byte_end":51638,"line_start":48,"line_end":48,"column_start":8,"column_end":21},"name":"compute_float","qualname":"::lemire::compute_float","value":"pub fn compute_float<F: Float>(i32, u64) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Compute a float using an extended-precision representation.","sig":null,"attributes":[{"value":"/ Compute a float using an extended-precision representation.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50707,"byte_end":50770,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50771,"byte_end":50774,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Fast conversion of a the significant digits and decimal exponent","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50775,"byte_end":50843,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ a float to a extended representation with a binary float. This","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50844,"byte_end":50910,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ algorithm will accurately parse the vast majority of cases,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50911,"byte_end":50974,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/ and uses a 128-bit representation (with a fallback 192-bit","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":50975,"byte_end":51037,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/ representation).","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51038,"byte_end":51058,"line_start":36,"line_end":36,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51059,"byte_end":51062,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This algorithm scales the exponent by the decimal exponent","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51063,"byte_end":51125,"line_start":38,"line_end":38,"column_start":1,"column_end":63}},{"value":"/ using pre-computed powers-of-5, and calculates if the","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51126,"byte_end":51183,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/ representation can be unambiguously rounded to the nearest","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51184,"byte_end":51246,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ machine float. Near-halfway cases are not handled here,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51247,"byte_end":51306,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/ and are represented by a negative, biased binary exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51307,"byte_end":51369,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51370,"byte_end":51373,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The algorithm is described in detail in \"Daniel Lemire, Number Parsing","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51374,"byte_end":51448,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ at a Gigabyte per Second\" in section 5, \"Fast Algorithm\", and","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51449,"byte_end":51514,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/ section 6, \"Exact Numbers And Ties\", available online:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51515,"byte_end":51573,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/ <https://arxiv.org/abs/2101.11408.pdf>.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":51574,"byte_end":51617,"line_start":47,"line_end":47,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":55787,"byte_end":55800,"line_start":153,"line_end":153,"column_start":8,"column_end":21},"name":"compute_error","qualname":"::lemire::compute_error","value":"pub fn compute_error<F: Float>(i32, u64) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Fallback algorithm to calculate the non-rounded representation.\n This calculates the extended representation, and then normalizes\n the resulting representation, so the high bit is set.\n","sig":null,"attributes":[{"value":"/ Fallback algorithm to calculate the non-rounded representation.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":55575,"byte_end":55642,"line_start":149,"line_end":149,"column_start":1,"column_end":68}},{"value":"/ This calculates the extended representation, and then normalizes","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":55643,"byte_end":55711,"line_start":150,"line_end":150,"column_start":1,"column_end":69}},{"value":"/ the resulting representation, so the high bit is set.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":55712,"byte_end":55769,"line_start":151,"line_end":151,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":55770,"byte_end":55779,"line_start":152,"line_end":152,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":159},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":56102,"byte_end":56122,"line_start":162,"line_end":162,"column_start":8,"column_end":28},"name":"compute_error_scaled","qualname":"::lemire::compute_error_scaled","value":"pub fn compute_error_scaled<F: Float>(i32, u64, i32) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Compute the error from a mantissa scaled to the exponent.\n","sig":null,"attributes":[{"value":"/ Compute the error from a mantissa scaled to the exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":56023,"byte_end":56084,"line_start":160,"line_end":160,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lemire.rs","byte_start":56085,"byte_end":56094,"line_start":161,"line_end":161,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":164},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mask","qualname":"::mask","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"decl_id":null,"docs":" Utilities to generate bitmasks.\n","sig":null,"attributes":[{"value":"/ Utilities to generate bitmasks.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97257,"byte_end":97292,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":165},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97539,"byte_end":97551,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"lower_n_mask","qualname":"::mask::lower_n_mask","value":"pub fn lower_n_mask(u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Generate a bitwise mask for the lower `n` bits.","sig":null,"attributes":[{"value":"/ Generate a bitwise mask for the lower `n` bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97311,"byte_end":97362,"line_start":5,"line_end":5,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97363,"byte_end":97366,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97367,"byte_end":97381,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97382,"byte_end":97385,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97386,"byte_end":97397,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/ # use minimal_lexical::mask::lower_n_mask;","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97398,"byte_end":97444,"line_start":10,"line_end":10,"column_start":1,"column_end":47}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97445,"byte_end":97466,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(lower_n_mask(2), 0b11);","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97467,"byte_end":97505,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/ # }","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97506,"byte_end":97513,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97514,"byte_end":97521,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97522,"byte_end":97531,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98016,"byte_end":98031,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"lower_n_halfway","qualname":"::mask::lower_n_halfway","value":"pub fn lower_n_halfway(u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate the halfway point for the lower `n` bits.","sig":null,"attributes":[{"value":"/ Calculate the halfway point for the lower `n` bits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97778,"byte_end":97833,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97834,"byte_end":97837,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97838,"byte_end":97852,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97853,"byte_end":97856,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97857,"byte_end":97868,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/ # use minimal_lexical::mask::lower_n_halfway;","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97869,"byte_end":97918,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97919,"byte_end":97940,"line_start":32,"line_end":32,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(lower_n_halfway(2), 0b10);","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97941,"byte_end":97982,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97983,"byte_end":97990,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97991,"byte_end":97998,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":97999,"byte_end":98008,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98423,"byte_end":98430,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"nth_bit","qualname":"::mask::nth_bit","value":"pub fn nth_bit(u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a scalar factor of 2 above the halfway point.","sig":null,"attributes":[{"value":"/ Calculate a scalar factor of 2 above the halfway point.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98196,"byte_end":98255,"line_start":46,"line_end":46,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98256,"byte_end":98259,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98260,"byte_end":98274,"line_start":48,"line_end":48,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98275,"byte_end":98278,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98279,"byte_end":98290,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/ # use minimal_lexical::mask::nth_bit;","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98291,"byte_end":98332,"line_start":51,"line_end":51,"column_start":1,"column_end":42}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98333,"byte_end":98354,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(nth_bit(2), 0b100);","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98355,"byte_end":98389,"line_start":53,"line_end":53,"column_start":1,"column_end":35}},{"value":"/ # }","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98390,"byte_end":98397,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98398,"byte_end":98405,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/mask.rs","byte_start":98406,"byte_end":98415,"line_start":56,"line_end":56,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":168},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":218},{"krate":0,"index":241}],"decl_id":null,"docs":" Utilities for Rust numbers.\n","sig":null,"attributes":[{"value":"/ Utilities for Rust numbers.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":98519,"byte_end":98550,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":188},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99121,"byte_end":99126,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Float","qualname":"::num::Float","value":"Float: Sized + Copy + PartialEq + PartialOrd + Send + Sync + ops::Add<Output =\nSelf> + ops::AddAssign + ops::Div<Output = Self> + ops::DivAssign +\nops::Mul<Output = Self> + ops::MulAssign + ops::Rem<Output = Self> +\nops::RemAssign + ops::Sub<Output = Self> + ops::SubAssign + ops::Neg<Output =\nSelf>","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"decl_id":null,"docs":" Generic floating-point type, to be used in generic code for parsing.","sig":null,"attributes":[{"value":"/ Generic floating-point type, to be used in generic code for parsing.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":98840,"byte_end":98912,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":98913,"byte_end":98916,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Although the trait is part of the public API, the trait provides methods","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":98917,"byte_end":98993,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ and constants that are effectively non-public: they may be removed","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":98994,"byte_end":99064,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ at any time without any breaking changes.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99065,"byte_end":99110,"line_start":17,"line_end":17,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":189},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100461,"byte_end":100471,"line_start":61,"line_end":61,"column_start":11,"column_end":21},"name":"MAX_DIGITS","qualname":"::num::Float::MAX_DIGITS","value":"usize","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Maximum number of digits that can contribute in the mantissa.","sig":null,"attributes":[{"value":"/ Maximum number of digits that can contribute in the mantissa.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99495,"byte_end":99560,"line_start":37,"line_end":37,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99565,"byte_end":99568,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ We can exactly represent a float in radix `b` from radix 2 if","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99573,"byte_end":99638,"line_start":39,"line_end":39,"column_start":5,"column_end":70}},{"value":"/ `b` is divisible by 2. This function calculates the exact number of","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99643,"byte_end":99714,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ digits required to exactly represent that float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99719,"byte_end":99771,"line_start":41,"line_end":41,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99776,"byte_end":99779,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ According to the \"Handbook of Floating Point Arithmetic\",","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99784,"byte_end":99845,"line_start":43,"line_end":43,"column_start":5,"column_end":66}},{"value":"/ for IEEE754, with emin being the min exponent, p2 being the","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99850,"byte_end":99913,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/ precision, and b being the radix, the number of digits follows as:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99918,"byte_end":99988,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99993,"byte_end":99996,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ `−emin + p2 + ⌊(emin + 1) log(2, b) − log(1 − 2^(−p2), b)⌋`","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100001,"byte_end":100076,"line_start":47,"line_end":47,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100081,"byte_end":100084,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ For f32, this follows as:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100089,"byte_end":100118,"line_start":49,"line_end":49,"column_start":5,"column_end":34}},{"value":"/     emin = -126","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100123,"byte_end":100142,"line_start":50,"line_end":50,"column_start":5,"column_end":24}},{"value":"/     p2 = 24","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100147,"byte_end":100162,"line_start":51,"line_end":51,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100167,"byte_end":100170,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ For f64, this follows as:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100175,"byte_end":100204,"line_start":53,"line_end":53,"column_start":5,"column_end":34}},{"value":"/     emin = -1022","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100209,"byte_end":100229,"line_start":54,"line_end":54,"column_start":5,"column_end":25}},{"value":"/     p2 = 53","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100234,"byte_end":100249,"line_start":55,"line_end":55,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100254,"byte_end":100257,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ In Python:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100262,"byte_end":100276,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/     `-emin + p2 + math.floor((emin+1)*math.log(2, b) - math.log(1-2**(-p2), b))`","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100281,"byte_end":100365,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100370,"byte_end":100373,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This was used to calculate the maximum number of digits for [2, 36].","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100378,"byte_end":100450,"line_start":60,"line_end":60,"column_start":5,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":190},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100539,"byte_end":100548,"line_start":66,"line_end":66,"column_start":11,"column_end":20},"name":"SIGN_MASK","qualname":"::num::Float::SIGN_MASK","value":"u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Bitmask for the sign bit.\n","sig":null,"attributes":[{"value":"/ Bitmask for the sign bit.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100499,"byte_end":100528,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":191},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100625,"byte_end":100638,"line_start":68,"line_end":68,"column_start":11,"column_end":24},"name":"EXPONENT_MASK","qualname":"::num::Float::EXPONENT_MASK","value":"u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Bitmask for the exponent, including the hidden bit.\n","sig":null,"attributes":[{"value":"/ Bitmask for the exponent, including the hidden bit.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100559,"byte_end":100614,"line_start":67,"line_end":67,"column_start":5,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":192},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100743,"byte_end":100758,"line_start":70,"line_end":70,"column_start":11,"column_end":26},"name":"HIDDEN_BIT_MASK","qualname":"::num::Float::HIDDEN_BIT_MASK","value":"u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Bitmask for the hidden bit in exponent, which is an implicit 1 in the fraction.\n","sig":null,"attributes":[{"value":"/ Bitmask for the hidden bit in exponent, which is an implicit 1 in the fraction.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100649,"byte_end":100732,"line_start":69,"line_end":69,"column_start":5,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":193},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100846,"byte_end":100859,"line_start":72,"line_end":72,"column_start":11,"column_end":24},"name":"MANTISSA_MASK","qualname":"::num::Float::MANTISSA_MASK","value":"u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Bitmask for the mantissa (fraction), excluding the hidden bit.\n","sig":null,"attributes":[{"value":"/ Bitmask for the mantissa (fraction), excluding the hidden bit.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100769,"byte_end":100835,"line_start":71,"line_end":71,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":194},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100959,"byte_end":100972,"line_start":77,"line_end":77,"column_start":11,"column_end":24},"name":"MANTISSA_SIZE","qualname":"::num::Float::MANTISSA_SIZE","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Size of the significand (mantissa) without hidden bit.\n","sig":null,"attributes":[{"value":"/ Size of the significand (mantissa) without hidden bit.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100890,"byte_end":100948,"line_start":76,"line_end":76,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":195},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101017,"byte_end":101030,"line_start":79,"line_end":79,"column_start":11,"column_end":24},"name":"EXPONENT_BIAS","qualname":"::num::Float::EXPONENT_BIAS","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Bias of the exponet\n","sig":null,"attributes":[{"value":"/ Bias of the exponet","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":100983,"byte_end":101006,"line_start":78,"line_end":78,"column_start":5,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":196},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101093,"byte_end":101110,"line_start":81,"line_end":81,"column_start":11,"column_end":28},"name":"DENORMAL_EXPONENT","qualname":"::num::Float::DENORMAL_EXPONENT","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Exponent portion of a denormal float.\n","sig":null,"attributes":[{"value":"/ Exponent portion of a denormal float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101041,"byte_end":101082,"line_start":80,"line_end":80,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":197},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101168,"byte_end":101180,"line_start":83,"line_end":83,"column_start":11,"column_end":23},"name":"MAX_EXPONENT","qualname":"::num::Float::MAX_EXPONENT","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Maximum exponent value in float.\n","sig":null,"attributes":[{"value":"/ Maximum exponent value in float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101121,"byte_end":101157,"line_start":82,"line_end":82,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":198},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101295,"byte_end":101305,"line_start":88,"line_end":88,"column_start":11,"column_end":21},"name":"CARRY_MASK","qualname":"::num::Float::CARRY_MASK","value":"u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Mask to determine if a full-carry occurred (1 in bit above hidden bit).\n","sig":null,"attributes":[{"value":"/ Mask to determine if a full-carry occurred (1 in bit above hidden bit).","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101209,"byte_end":101284,"line_start":87,"line_end":87,"column_start":5,"column_end":80}}]},{"kind":"Const","id":{"krate":0,"index":199},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101456,"byte_end":101466,"line_start":92,"line_end":92,"column_start":11,"column_end":21},"name":"INVALID_FP","qualname":"::num::Float::INVALID_FP","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Bias for marking an invalid extended float.\n","sig":null,"attributes":[{"value":"/ Bias for marking an invalid extended float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101317,"byte_end":101364,"line_start":90,"line_end":90,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101557,"byte_end":101579,"line_start":95,"line_end":95,"column_start":11,"column_end":33},"name":"MAX_MANTISSA_FAST_PATH","qualname":"::num::Float::MAX_MANTISSA_FAST_PATH","value":"u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":201},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":101681,"byte_end":101695,"line_start":98,"line_end":98,"column_start":11,"column_end":25},"name":"INFINITE_POWER","qualname":"::num::Float::INFINITE_POWER","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":202},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":102731,"byte_end":102757,"line_start":118,"line_end":118,"column_start":11,"column_end":37},"name":"MIN_EXPONENT_ROUND_TO_EVEN","qualname":"::num::Float::MIN_EXPONENT_ROUND_TO_EVEN","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":203},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":102774,"byte_end":102800,"line_start":119,"line_end":119,"column_start":11,"column_end":37},"name":"MAX_EXPONENT_ROUND_TO_EVEN","qualname":"::num::Float::MAX_EXPONENT_ROUND_TO_EVEN","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":204},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":102891,"byte_end":102907,"line_start":122,"line_end":122,"column_start":11,"column_end":27},"name":"MINIMUM_EXPONENT","qualname":"::num::Float::MINIMUM_EXPONENT","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Minimum normal exponent value `-(1 << (EXPONENT_SIZE - 1)) + 1`.\n","sig":null,"attributes":[{"value":"/ Minimum normal exponent value `-(1 << (EXPONENT_SIZE - 1)) + 1`.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":102812,"byte_end":102880,"line_start":121,"line_end":121,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":205},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":102981,"byte_end":103002,"line_start":125,"line_end":125,"column_start":11,"column_end":32},"name":"SMALLEST_POWER_OF_TEN","qualname":"::num::Float::SMALLEST_POWER_OF_TEN","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Smallest decimal exponent for a non-zero value.\n","sig":null,"attributes":[{"value":"/ Smallest decimal exponent for a non-zero value.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":102919,"byte_end":102970,"line_start":124,"line_end":124,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":206},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103079,"byte_end":103099,"line_start":128,"line_end":128,"column_start":11,"column_end":31},"name":"LARGEST_POWER_OF_TEN","qualname":"::num::Float::LARGEST_POWER_OF_TEN","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Largest decimal exponent for a non-infinite value.\n","sig":null,"attributes":[{"value":"/ Largest decimal exponent for a non-infinite value.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103014,"byte_end":103068,"line_start":127,"line_end":127,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":207},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103208,"byte_end":103230,"line_start":131,"line_end":131,"column_start":11,"column_end":33},"name":"MIN_EXPONENT_FAST_PATH","qualname":"::num::Float::MIN_EXPONENT_FAST_PATH","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Minimum exponent that for a fast path case, or `-⌊(MANTISSA_SIZE+1)/log2(10)⌋`\n","sig":null,"attributes":[{"value":"/ Minimum exponent that for a fast path case, or `-⌊(MANTISSA_SIZE+1)/log2(10)⌋`","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103111,"byte_end":103197,"line_start":130,"line_end":130,"column_start":5,"column_end":87}}]},{"kind":"Const","id":{"krate":0,"index":208},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103337,"byte_end":103359,"line_start":134,"line_end":134,"column_start":11,"column_end":33},"name":"MAX_EXPONENT_FAST_PATH","qualname":"::num::Float::MAX_EXPONENT_FAST_PATH","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Maximum exponent that for a fast path case, or `⌊(MANTISSA_SIZE+1)/log2(5)⌋`\n","sig":null,"attributes":[{"value":"/ Maximum exponent that for a fast path case, or `⌊(MANTISSA_SIZE+1)/log2(5)⌋`","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103242,"byte_end":103326,"line_start":133,"line_end":133,"column_start":5,"column_end":85}}]},{"kind":"Const","id":{"krate":0,"index":209},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103534,"byte_end":103566,"line_start":138,"line_end":138,"column_start":11,"column_end":43},"name":"MAX_EXPONENT_DISGUISED_FAST_PATH","qualname":"::num::Float::MAX_EXPONENT_DISGUISED_FAST_PATH","value":"i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Maximum exponent that can be represented for a disguised-fast path case.\n This is `MAX_EXPONENT_FAST_PATH + ⌊(MANTISSA_SIZE+1)/log2(10)⌋`\n","sig":null,"attributes":[{"value":"/ Maximum exponent that can be represented for a disguised-fast path case.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103371,"byte_end":103447,"line_start":136,"line_end":136,"column_start":5,"column_end":81}},{"value":"/ This is `MAX_EXPONENT_FAST_PATH + ⌊(MANTISSA_SIZE+1)/log2(10)⌋`","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103452,"byte_end":103523,"line_start":137,"line_end":137,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103622,"byte_end":103630,"line_start":141,"line_end":141,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::num::Float::from_u64","value":"pub fn from_u64(u64) -> Self","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Convert 64-bit integer to float.\n","sig":null,"attributes":[{"value":"/ Convert 64-bit integer to float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103578,"byte_end":103614,"line_start":140,"line_end":140,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103693,"byte_end":103702,"line_start":144,"line_end":144,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::num::Float::from_bits","value":"pub fn from_bits(u64) -> Self","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103727,"byte_end":103734,"line_start":145,"line_end":145,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::num::Float::to_bits","value":"pub fn to_bits(Self) -> u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103931,"byte_end":103944,"line_start":152,"line_end":152,"column_start":15,"column_end":28},"name":"pow_fast_path","qualname":"::num::Float::pow_fast_path","value":"pub unsafe fn pow_fast_path(usize) -> Self","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Get a small power-of-radix for fast-path multiplication.","sig":null,"attributes":[{"value":"/ Get a small power-of-radix for fast-path multiplication.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103754,"byte_end":103814,"line_start":147,"line_end":147,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103819,"byte_end":103822,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103827,"byte_end":103839,"line_start":149,"line_end":149,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103844,"byte_end":103847,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Safe as long as the exponent is smaller than the table size.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103852,"byte_end":103916,"line_start":151,"line_end":151,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104185,"byte_end":104202,"line_start":160,"line_end":160,"column_start":15,"column_end":32},"name":"int_pow_fast_path","qualname":"::num::Float::int_pow_fast_path","value":"pub unsafe fn int_pow_fast_path(usize, u32) -> u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Get a small, integral power-of-radix for fast-path multiplication.","sig":null,"attributes":[{"value":"/ Get a small, integral power-of-radix for fast-path multiplication.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":103976,"byte_end":104046,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104051,"byte_end":104054,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104059,"byte_end":104071,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104076,"byte_end":104079,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Safe as long as the exponent is smaller than the table size.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104084,"byte_end":104148,"line_start":158,"line_end":158,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104153,"byte_end":104170,"line_start":159,"line_end":159,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104768,"byte_end":104779,"line_start":175,"line_end":175,"column_start":8,"column_end":19},"name":"is_denormal","qualname":"::num::Float::is_denormal","value":"pub fn is_denormal(Self) -> bool","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Returns true if the float is a denormal.\n","sig":null,"attributes":[{"value":"/ Returns true if the float is a denormal.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104702,"byte_end":104746,"line_start":173,"line_end":173,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104751,"byte_end":104760,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104921,"byte_end":104929,"line_start":181,"line_end":181,"column_start":8,"column_end":16},"name":"exponent","qualname":"::num::Float::exponent","value":"pub fn exponent(Self) -> i32","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Get exponent component from the float.\n","sig":null,"attributes":[{"value":"/ Get exponent component from the float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104857,"byte_end":104899,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":104904,"byte_end":104913,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":105281,"byte_end":105289,"line_start":193,"line_end":193,"column_start":8,"column_end":16},"name":"mantissa","qualname":"::num::Float::mantissa","value":"pub fn mantissa(Self) -> u64","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Get mantissa (significand) component from float.\n","sig":null,"attributes":[{"value":"/ Get mantissa (significand) component from float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":105207,"byte_end":105259,"line_start":191,"line_end":191,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":105264,"byte_end":105273,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":264},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"number","qualname":"::number","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":448},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":268}],"decl_id":null,"docs":" Representation of a float as the significant digits and exponent.","sig":null,"attributes":[{"value":"/ Representation of a float as the significant digits and exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":108769,"byte_end":108838,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":108839,"byte_end":108842,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is adapted from [fast-float-rust](https://github.com/aldanor/fast-float-rust),","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":108843,"byte_end":108930,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ a port of [fast_float](https://github.com/fastfloat/fast_float) to Rust.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":108931,"byte_end":109007,"line_start":4,"line_end":4,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":448},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109414,"byte_end":109420,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Number","qualname":"::number::Number","value":"Number { exponent, mantissa, many_digits }","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"decl_id":null,"docs":" Representation of a number as the significant digits and exponent.","sig":null,"attributes":[{"value":"/ Representation of a number as the significant digits and exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109109,"byte_end":109179,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109180,"byte_end":109183,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This is only used if the exponent base and the significant digit","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109184,"byte_end":109252,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ radix are the same, since we need to be able to move powers in and","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109253,"byte_end":109323,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ out of the exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109324,"byte_end":109348,"line_start":16,"line_end":16,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":449},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109490,"byte_end":109498,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"exponent","qualname":"::number::Number::exponent","value":"i32","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" The exponent of the float, scaled to the mantissa.\n","sig":null,"attributes":[{"value":"/ The exponent of the float, scaled to the mantissa.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109427,"byte_end":109481,"line_start":19,"line_end":19,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":450},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109558,"byte_end":109566,"line_start":22,"line_end":22,"column_start":9,"column_end":17},"name":"mantissa","qualname":"::number::Number::mantissa","value":"u64","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" The significant digits of the float.\n","sig":null,"attributes":[{"value":"/ The significant digits of the float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109509,"byte_end":109549,"line_start":21,"line_end":21,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":451},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109631,"byte_end":109642,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"name":"many_digits","qualname":"::number::Number::many_digits","value":"bool","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" If the significant digits were truncated.\n","sig":null,"attributes":[{"value":"/ If the significant digits were truncated.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109577,"byte_end":109622,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109772,"byte_end":109784,"line_start":30,"line_end":30,"column_start":12,"column_end":24},"name":"is_fast_path","qualname":"<Number>::is_fast_path","value":"pub fn is_fast_path<F: Float>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Detect if the float can be accurately reconstructed from native floats.\n","sig":null,"attributes":[{"value":"/ Detect if the float can be accurately reconstructed from native floats.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109671,"byte_end":109746,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109751,"byte_end":109760,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110557,"byte_end":110570,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"name":"try_fast_path","qualname":"<Number>::try_fast_path","value":"pub fn try_fast_path<F: Float>(&Self) -> Option<F>","parent":null,"children":[],"decl_id":null,"docs":" The fast path algorithmn using machine-sized integers and floats.","sig":null,"attributes":[{"value":"/ The fast path algorithmn using machine-sized integers and floats.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110033,"byte_end":110102,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110107,"byte_end":110110,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This is extracted into a separate function so that it can be attempted before constructing","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110115,"byte_end":110209,"line_start":39,"line_end":39,"column_start":5,"column_end":99}},{"value":"/ a Decimal. This only works if both the mantissa and the exponent","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110214,"byte_end":110282,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/ can be exactly represented as a machine float, since IEE-754 guarantees","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110287,"byte_end":110362,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ no rounding will occur.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110367,"byte_end":110394,"line_start":42,"line_end":42,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110399,"byte_end":110402,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ There is an exception: disguised fast-path cases, where we can shift","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110407,"byte_end":110479,"line_start":44,"line_end":44,"column_start":5,"column_end":77}},{"value":"/ powers-of-10 from the exponent to the significant digits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":110484,"byte_end":110545,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":273},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::parse","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" Parse byte iterators to float.\n","sig":null,"attributes":[{"value":"/ Parse byte iterators to float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":112493,"byte_end":112527,"line_start":1,"line_end":1,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":301},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117370,"byte_end":117381,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"parse_float","qualname":"::parse::parse_float","value":"pub fn parse_float<'a, F, Iter1, Iter2>(Iter1, Iter2, i32) -> F where\nF: Float, Iter1: Iterator<Item = &'a u8> + Clone, Iter2: Iterator<Item =\n&'a u8> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Parse float from extracted float components.","sig":null,"attributes":[{"value":"/ Parse float from extracted float components.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116224,"byte_end":116272,"line_start":121,"line_end":121,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116273,"byte_end":116276,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ * `integer`     - Cloneable, forward iterator over integer digits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116277,"byte_end":116347,"line_start":123,"line_end":123,"column_start":1,"column_end":71}},{"value":"/ * `fraction`    - Cloneable, forward iterator over integer digits.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116348,"byte_end":116418,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"/ * `exponent`    - Parsed, 32-bit exponent.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116419,"byte_end":116465,"line_start":125,"line_end":125,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116466,"byte_end":116469,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ # Preconditions","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116470,"byte_end":116489,"line_start":127,"line_end":127,"column_start":1,"column_end":20}},{"value":"/ 1. The integer should not have leading zeros.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116490,"byte_end":116539,"line_start":128,"line_end":128,"column_start":1,"column_end":50}},{"value":"/ 2. The fraction should not have trailing zeros.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116540,"byte_end":116591,"line_start":129,"line_end":129,"column_start":1,"column_end":52}},{"value":"/ 3. All bytes in `integer` and `fraction` should be valid digits,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116592,"byte_end":116660,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/     in the range [`b'0', b'9'].","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116661,"byte_end":116696,"line_start":131,"line_end":131,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116697,"byte_end":116700,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116701,"byte_end":116713,"line_start":133,"line_end":133,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116714,"byte_end":116717,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Although passing garbage input will not cause memory safety issues,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116718,"byte_end":116789,"line_start":135,"line_end":135,"column_start":1,"column_end":72}},{"value":"/ it is very likely to cause a panic with a large number of digits, or","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116790,"byte_end":116862,"line_start":136,"line_end":136,"column_start":1,"column_end":73}},{"value":"/ in debug mode. The big-integer arithmetic with the `no_alloc` feature","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116863,"byte_end":116936,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/ assumes a maximum, fixed-width input, which assumes at maximum a","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":116937,"byte_end":117005,"line_start":138,"line_end":138,"column_start":1,"column_end":69}},{"value":"/ value of `10^(769 + 342)`, or ~4000 bits of storage. Passing in","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117006,"byte_end":117073,"line_start":139,"line_end":139,"column_start":1,"column_end":68}},{"value":"/ nonsensical digits may require up to ~6000 bits of storage, which will","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117074,"byte_end":117148,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ panic when attempting to add it to the big integer. It is therefore","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117149,"byte_end":117220,"line_start":141,"line_end":141,"column_start":1,"column_end":72}},{"value":"/ up to the caller to validate this input.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117221,"byte_end":117265,"line_start":142,"line_end":142,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117266,"byte_end":117269,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ We cannot efficiently remove trailing zeros while only accepting a","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117270,"byte_end":117340,"line_start":144,"line_end":144,"column_start":1,"column_end":71}},{"value":"/ forward iterator.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":117341,"byte_end":117362,"line_start":145,"line_end":145,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":306},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":118430,"byte_end":118443,"line_start":176,"line_end":176,"column_start":8,"column_end":21},"name":"moderate_path","qualname":"::parse::moderate_path","value":"pub fn moderate_path<F: Float>(&Number) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Wrapper for different moderate-path algorithms.\n A return exponent of `-1` indicates an invalid value.\n","sig":null,"attributes":[{"value":"/ Wrapper for different moderate-path algorithms.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":118303,"byte_end":118354,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ A return exponent of `-1` indicates an invalid value.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":118355,"byte_end":118412,"line_start":174,"line_end":174,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":118413,"byte_end":118422,"line_start":175,"line_end":175,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":119006,"byte_end":119015,"line_start":199,"line_end":199,"column_start":8,"column_end":17},"name":"add_digit","qualname":"::parse::add_digit","value":"pub fn add_digit(u64, u8) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/parse.rs","byte_start":118989,"byte_end":118998,"line_start":198,"line_end":198,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":310},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rounding","qualname":"::rounding","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":329}],"decl_id":null,"docs":" Defines rounding schemes for floating-point numbers.\n","sig":null,"attributes":[{"value":"/ Defines rounding schemes for floating-point numbers.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119112,"byte_end":119168,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":324},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119574,"byte_end":119579,"line_start":17,"line_end":17,"column_start":8,"column_end":13},"name":"round","qualname":"::rounding::round","value":"pub fn round<F, Cb>(&mut ExtendedFloat, Cb) where F: Float,\nCb: Fn(&mut ExtendedFloat, i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Round an extended-precision float to the nearest machine float.","sig":null,"attributes":[{"value":"/ Round an extended-precision float to the nearest machine float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119328,"byte_end":119395,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119396,"byte_end":119399,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Shifts the significant digits into place, adjusts the exponent,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119400,"byte_end":119467,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ so it can be easily converted to a native float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119468,"byte_end":119520,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":119558,"byte_end":119564,"line_start":16,"line_end":16,"column_start":38,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121571,"byte_end":121593,"line_start":77,"line_end":77,"column_start":8,"column_end":30},"name":"round_nearest_tie_even","qualname":"::rounding::round_nearest_tie_even","value":"pub fn round_nearest_tie_even<Cb>(&mut ExtendedFloat, i32, Cb) where\nCb: Fn(bool, bool, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Shift right N-bytes and round towards a direction.","sig":null,"attributes":[{"value":"/ Shift right N-bytes and round towards a direction.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121348,"byte_end":121402,"line_start":70,"line_end":70,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121403,"byte_end":121406,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Callback should take the following parameters:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121407,"byte_end":121457,"line_start":72,"line_end":72,"column_start":1,"column_end":51}},{"value":"/     1. is_odd","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121458,"byte_end":121475,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/     1. is_halfway","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121476,"byte_end":121497,"line_start":74,"line_end":74,"column_start":1,"column_end":22}},{"value":"/     1. is_above","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121498,"byte_end":121517,"line_start":75,"line_end":75,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":121555,"byte_end":121561,"line_start":76,"line_end":76,"column_start":38,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":329},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":123168,"byte_end":123178,"line_start":124,"line_end":124,"column_start":8,"column_end":18},"name":"round_down","qualname":"::rounding::round_down","value":"pub fn round_down(&mut ExtendedFloat, i32)","parent":null,"children":[],"decl_id":null,"docs":" Round our significant digits into place, truncating them.\n","sig":null,"attributes":[{"value":"/ Round our significant digits into place, truncating them.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":123053,"byte_end":123114,"line_start":122,"line_end":122,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/rounding.rs","byte_start":123152,"byte_end":123158,"line_start":123,"line_end":123,"column_start":38,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":330},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slow","qualname":"::slow","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":372},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":391}],"decl_id":null,"docs":" Slow, fallback cases where we cannot unambiguously round a float.","sig":null,"attributes":[{"value":"/ Slow, fallback cases where we cannot unambiguously round a float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":123399,"byte_end":123468,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":123469,"byte_end":123472,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This occurs when we cannot determine the exact representation using","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":123473,"byte_end":123544,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ both the fast path (native) cases nor the Lemire/Bellerophon algorithms,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":123545,"byte_end":123621,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ and therefore must fallback to a slow, arbitrary-precision representation.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":123622,"byte_end":123700,"line_start":5,"line_end":5,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":367},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124968,"byte_end":124972,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"slow","qualname":"::slow::slow","value":"pub fn slow<'a, F, Iter1, Iter2>(Number, ExtendedFloat, Iter1, Iter2)\n-> ExtendedFloat where F: Float, Iter1: Iterator<Item = &'a u8> + Clone,\nIter2: Iterator<Item = &'a u8> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Parse the significant digits and biased, binary exponent of a float.","sig":null,"attributes":[{"value":"/ Parse the significant digits and biased, binary exponent of a float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":123987,"byte_end":124059,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124060,"byte_end":124063,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is a fallback algorithm that uses a big-integer representation","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124064,"byte_end":124135,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ of the float, and therefore is considerably slower than faster","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124136,"byte_end":124202,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ approximations. However, it will always determine how to round","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124203,"byte_end":124269,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ the significant digits to the nearest machine float, allowing","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124270,"byte_end":124335,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/ use to handle near half-way cases.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124336,"byte_end":124374,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124375,"byte_end":124378,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Near half-way cases are halfway between two consecutive machine floats.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124379,"byte_end":124454,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ For example, the float `16777217.0` has a bitwise representation of","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124455,"byte_end":124526,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ `100000000000000000000000 1`. Rounding to a single-precision float,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124527,"byte_end":124598,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ the trailing `1` is truncated. Using round-nearest, tie-even, any","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124599,"byte_end":124668,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ value above `16777217.0` must be rounded up to `16777218.0`, while","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124669,"byte_end":124739,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ any value before or equal to `16777217.0` must be rounded down","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124740,"byte_end":124806,"line_start":32,"line_end":32,"column_start":1,"column_end":67}},{"value":"/ to `16777216.0`. These near-halfway conversions therefore may require","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124807,"byte_end":124880,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ a large number of digits to unambiguously determine how to round.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124881,"byte_end":124950,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":124951,"byte_end":124960,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":372},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":126149,"byte_end":126168,"line_start":69,"line_end":69,"column_start":8,"column_end":27},"name":"positive_digit_comp","qualname":"::slow::positive_digit_comp","value":"pub fn positive_digit_comp<F: Float>(Bigint, i32) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Generate the significant digits with a positive exponent relative to mantissa.\n","sig":null,"attributes":[{"value":"/ Generate the significant digits with a positive exponent relative to mantissa.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":126059,"byte_end":126141,"line_start":68,"line_end":68,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":376},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128429,"byte_end":128448,"line_start":116,"line_end":116,"column_start":8,"column_end":27},"name":"negative_digit_comp","qualname":"::slow::negative_digit_comp","value":"pub fn negative_digit_comp<F: Float>(Bigint, ExtendedFloat, i32)\n-> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Generate the significant digits with a negative exponent relative to mantissa.","sig":null,"attributes":[{"value":"/ Generate the significant digits with a negative exponent relative to mantissa.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127189,"byte_end":127271,"line_start":95,"line_end":95,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127272,"byte_end":127275,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This algorithm is quite simple: we have the significant digits `m1 * b^N1`,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127276,"byte_end":127355,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ where `m1` is the bigint mantissa, `b` is the radix, and `N1` is the radix","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127356,"byte_end":127434,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ exponent. We then calculate the theoretical representation of `b+h`, which","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127435,"byte_end":127513,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/ is `m2 * 2^N2`, where `m2` is the bigint mantissa and `N2` is the binary","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127514,"byte_end":127590,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ exponent. If we had infinite, efficient floating precision, this would be","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127591,"byte_end":127668,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/ equal to `m1 / b^-N1` and then compare it to `m2 * 2^N2`.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127669,"byte_end":127730,"line_start":102,"line_end":102,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127731,"byte_end":127734,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Since we cannot divide and keep precision, we must multiply the other:","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127735,"byte_end":127809,"line_start":104,"line_end":104,"column_start":1,"column_end":75}},{"value":"/ if we want to do `m1 / b^-N1 >= m2 * 2^N2`, we can do","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127810,"byte_end":127867,"line_start":105,"line_end":105,"column_start":1,"column_end":58}},{"value":"/ `m1 >= m2 * b^-N1 * 2^N2` Going to the decimal case, we can show and example","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127868,"byte_end":127948,"line_start":106,"line_end":106,"column_start":1,"column_end":81}},{"value":"/ and simplify this further: `m1 >= m2 * 2^N2 * 10^-N1`. Since we can remove","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":127949,"byte_end":128027,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ a power-of-two, this is `m1 >= m2 * 2^(N2 - N1) * 5^-N1`. Therefore, if","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128028,"byte_end":128103,"line_start":108,"line_end":108,"column_start":1,"column_end":76}},{"value":"/ `N2 - N1 > 0`, we need have `m1 >= m2 * 2^(N2 - N1) * 5^-N1`, otherwise,","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128104,"byte_end":128180,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/ we have `m1 * 2^(N1 - N2) >= m2 * 5^-N1`, where the resulting exponents","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128181,"byte_end":128256,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ are all positive.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128257,"byte_end":128278,"line_start":111,"line_end":111,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128279,"byte_end":128282,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ This allows us to compare both floats using integers efficiently","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128283,"byte_end":128351,"line_start":113,"line_end":113,"column_start":1,"column_end":69}},{"value":"/ without any loss of precision.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128352,"byte_end":128386,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"allow(clippy :: comparison_chain)","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":128387,"byte_end":128421,"line_start":115,"line_end":115,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":384},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":133750,"byte_end":133764,"line_start":265,"line_end":265,"column_start":8,"column_end":22},"name":"parse_mantissa","qualname":"::slow::parse_mantissa","value":"pub fn parse_mantissa<'a, Iter1, Iter2>(Iter1, Iter2, usize)\n-> (Bigint, usize) where Iter1: Iterator<Item = &'a u8> + Clone,\nIter2: Iterator<Item = &'a u8> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Parse the full mantissa into a big integer.","sig":null,"attributes":[{"value":"/ Parse the full mantissa into a big integer.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":133556,"byte_end":133603,"line_start":261,"line_end":261,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":133604,"byte_end":133607,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ Returns the parsed mantissa and the number of digits in the mantissa.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":133608,"byte_end":133681,"line_start":263,"line_end":263,"column_start":1,"column_end":74}},{"value":"/ The max digits is the maximum number of digits plus one.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":133682,"byte_end":133742,"line_start":264,"line_end":264,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":388},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137131,"byte_end":137150,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"scientific_exponent","qualname":"::slow::scientific_exponent","value":"pub fn scientific_exponent(&Number) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the scientific exponent from a `Number` value.\n Any other attempts would require slowdowns for faster algorithms.\n","sig":null,"attributes":[{"value":"/ Calculate the scientific exponent from a `Number` value.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":136983,"byte_end":137043,"line_start":364,"line_end":364,"column_start":1,"column_end":61}},{"value":"/ Any other attempts would require slowdowns for faster algorithms.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137044,"byte_end":137113,"line_start":365,"line_end":365,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137114,"byte_end":137123,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137645,"byte_end":137646,"line_start":388,"line_end":388,"column_start":8,"column_end":9},"name":"b","qualname":"::slow::b","value":"pub fn b<F: Float>(F) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Calculate `b` from a a representation of `b` as a float.\n","sig":null,"attributes":[{"value":"/ Calculate `b` from a a representation of `b` as a float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137567,"byte_end":137627,"line_start":386,"line_end":386,"column_start":1,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137628,"byte_end":137637,"line_start":387,"line_end":387,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137858,"byte_end":137860,"line_start":397,"line_end":397,"column_start":8,"column_end":10},"name":"bh","qualname":"::slow::bh","value":"pub fn bh<F: Float>(F) -> ExtendedFloat","parent":null,"children":[],"decl_id":null,"docs":" Calculate `b+h` from a a representation of `b` as a float.\n","sig":null,"attributes":[{"value":"/ Calculate `b+h` from a a representation of `b` as a float.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137778,"byte_end":137840,"line_start":395,"line_end":395,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/slow.rs","byte_start":137841,"byte_end":137850,"line_start":396,"line_end":396,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"table","qualname":"::table","value":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395}],"decl_id":null,"docs":" Pre-computed tables for parsing float strings.\n","sig":null,"attributes":[{"value":"/ Pre-computed tables for parsing float strings.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table.rs","byte_start":146888,"byte_end":146938,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":397},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_lemire.rs","byte_start":151774,"byte_end":151796,"line_start":15,"line_end":15,"column_start":11,"column_end":33},"name":"SMALLEST_POWER_OF_FIVE","qualname":"::table_lemire::SMALLEST_POWER_OF_FIVE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":398},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_lemire.rs","byte_start":151820,"byte_end":151841,"line_start":16,"line_end":16,"column_start":11,"column_end":32},"name":"LARGEST_POWER_OF_FIVE","qualname":"::table_lemire::LARGEST_POWER_OF_FIVE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":399},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_lemire.rs","byte_start":151864,"byte_end":151880,"line_start":17,"line_end":17,"column_start":11,"column_end":27},"name":"N_POWERS_OF_FIVE","qualname":"::table_lemire::N_POWERS_OF_FIVE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":466},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_lemire.rs","byte_start":152188,"byte_end":152205,"line_start":24,"line_end":24,"column_start":12,"column_end":29},"name":"POWER_OF_FIVE_128","qualname":"::table_lemire::POWER_OF_FIVE_128","value":"[(u64, u64); ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustfmt::skip","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_lemire.rs","byte_start":152160,"byte_end":152176,"line_start":23,"line_end":23,"column_start":1,"column_end":17}}]},{"kind":"Const","id":{"krate":0,"index":401},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":188333,"byte_end":188347,"line_start":7,"line_end":7,"column_start":11,"column_end":25},"name":"SMALL_INT_POW5","qualname":"::table_small::SMALL_INT_POW5","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-5.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-5.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":188286,"byte_end":188322,"line_start":6,"line_end":6,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":403},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":188861,"byte_end":188876,"line_start":39,"line_end":39,"column_start":11,"column_end":26},"name":"SMALL_INT_POW10","qualname":"::table_small::SMALL_INT_POW10","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-10.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-10.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":188813,"byte_end":188850,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":405},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":189274,"byte_end":189289,"line_start":63,"line_end":63,"column_start":11,"column_end":26},"name":"SMALL_F32_POW10","qualname":"::table_small::SMALL_F32_POW10","value":"[f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-10.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-10.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":189226,"byte_end":189263,"line_start":62,"line_end":62,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":407},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":189434,"byte_end":189449,"line_start":67,"line_end":67,"column_start":11,"column_end":26},"name":"SMALL_F64_POW10","qualname":"::table_small::SMALL_F64_POW10","value":"[f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed, small powers-of-10.\n","sig":null,"attributes":[{"value":"/ Pre-computed, small powers-of-10.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":189386,"byte_end":189423,"line_start":66,"line_end":66,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":409},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":190062,"byte_end":190072,"line_start":81,"line_end":81,"column_start":11,"column_end":21},"name":"LARGE_POW5","qualname":"::table_small::LARGE_POW5","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Pre-computed large power-of-5 for 64-bit limbs.\n","sig":null,"attributes":[{"value":"/ Pre-computed large power-of-5 for 64-bit limbs.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":189931,"byte_end":189982,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"cfg(all(target_pointer_width = \"64\", not(target_arch = \"sparc\")))","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":189983,"byte_end":190051,"line_start":80,"line_end":80,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":411},"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":190274,"byte_end":190289,"line_start":90,"line_end":90,"column_start":11,"column_end":26},"name":"LARGE_POW5_STEP","qualname":"::table_small::LARGE_POW5_STEP","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Step for large power-of-5 for 32-bit limbs.\n","sig":null,"attributes":[{"value":"/ Step for large power-of-5 for 32-bit limbs.","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/table_small.rs","byte_start":190216,"byte_end":190263,"line_start":89,"line_end":89,"column_start":1,"column_end":48}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17843,"byte_end":17849,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18853,"byte_end":18859,"line_start":102,"line_end":102,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19102,"byte_end":19113,"line_start":115,"line_end":115,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45302,"byte_end":45309,"line_start":21,"line_end":21,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48468,"byte_end":48475,"line_start":144,"line_end":144,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48680,"byte_end":48687,"line_start":153,"line_end":153,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48718,"byte_end":48725,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48879,"byte_end":48886,"line_start":163,"line_end":163,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":49020,"byte_end":49027,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":49170,"byte_end":49177,"line_start":178,"line_end":178,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":49320,"byte_end":49327,"line_start":185,"line_end":185,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109658,"byte_end":109664,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1656,"byte_end":1662,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1672,"byte_end":1686,"line_start":48,"line_end":48,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":79}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1709,"byte_end":1716,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":85}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1726,"byte_end":1732,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":133}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1756,"byte_end":1760,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":164}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1770,"byte_end":1773,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":168}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1783,"byte_end":1789,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":264}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1799,"byte_end":1804,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":273}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1814,"byte_end":1822,"line_start":57,"line_end":57,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":310}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1832,"byte_end":1836,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":330}},{"kind":"Mod","span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/lib.rs","byte_start":1864,"byte_end":1869,"line_start":60,"line_end":60,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":393}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":17843,"byte_end":17849,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":18853,"byte_end":18859,"line_start":102,"line_end":102,"column_start":34,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":418},"to":{"krate":2,"index":3095}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/bigint.rs","byte_start":19102,"byte_end":19113,"line_start":115,"line_end":115,"column_start":35,"column_end":46},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":38},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":45302,"byte_end":45309,"line_start":21,"line_end":21,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48468,"byte_end":48475,"line_start":144,"line_end":144,"column_start":20,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48680,"byte_end":48687,"line_start":153,"line_end":153,"column_start":13,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48718,"byte_end":48725,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":48879,"byte_end":48886,"line_start":163,"line_end":163,"column_start":19,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":49020,"byte_end":49027,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":49170,"byte_end":49177,"line_start":178,"line_end":178,"column_start":24,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/heapvec.rs","byte_start":49320,"byte_end":49327,"line_start":185,"line_end":185,"column_start":42,"column_end":49},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":3095}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99132,"byte_end":99137,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99144,"byte_end":99148,"line_start":20,"line_end":20,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2999},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99155,"byte_end":99164,"line_start":21,"line_end":21,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99171,"byte_end":99181,"line_start":22,"line_end":22,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2687},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99188,"byte_end":99192,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2989},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99199,"byte_end":99203,"line_start":24,"line_end":24,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3001},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99215,"byte_end":99218,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3056},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99245,"byte_end":99254,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3087},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99266,"byte_end":99269,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3071},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99296,"byte_end":99305,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3099},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99317,"byte_end":99320,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3066},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99347,"byte_end":99356,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3095},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99368,"byte_end":99371,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3077},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99398,"byte_end":99407,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3103},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99419,"byte_end":99422,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3061},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99449,"byte_end":99458,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3091},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/num.rs","byte_start":99470,"byte_end":99473,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3083},"to":{"krate":0,"index":188}},{"span":{"file_name":"/Users/merisb/.cargo/registry/src/github.com-1ecc6299db9ec823/minimal-lexical-0.1.4/src/number.rs","byte_start":109658,"byte_end":109664,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}}]}